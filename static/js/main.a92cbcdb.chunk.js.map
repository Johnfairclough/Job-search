{"version":3,"sources":["App.js","JobSearch.js","Utils.js","Templates.js","serviceWorker.js","index.js"],"names":["jobSearch","searchFormSelector","resultsContainerSelector","loadingElementSelector","this","searchForm","document","querySelector","resultsContainer","loadingElement","countryCode","setCurrencySymbol","fetch","then","results","json","toLowerCase","currencySymbol","gb","us","au","ca","addEventListener","event","preventDefault","innerHTML","form","Array","from","elements","reduce","acc","id","value","search","location","distance","min","max","startLoading","response","stopLoading","map","job","currency","title","salary_max","display_name","description","redirect_url","jobTemplate","join","jobs","catch","classList","add","remove","setCountryCode","configureFormListener","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"mNAIMA,EAAY,ICAlB,WAEE,WAAYC,EAAoBC,EAA0BC,GAAyB,oBACjFC,KAAKC,WAAaC,SAASC,cAAcN,GACzCG,KAAKI,iBAAmBF,SAASC,cAAcL,GAC/CE,KAAKK,eAAiBH,SAASC,cAAcJ,GALjD,6DAQoB,IAAD,OACfC,KAAKM,YAAc,KACnBN,KAAKO,oBAELC,MAAM,0BACHC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAC,GACJ,EAAKJ,YAAcI,EAAQJ,YAAYM,cACvC,EAAKL,yBAhBb,0CAqBIP,KAAKa,eCpBc,CACfC,GAAI,OACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KDgBgCjB,KAAKM,eArBjD,8CAwB2B,IAAD,OACtBN,KAAKC,WAAWiB,iBAAiB,UAAU,SAACC,GAC5CA,EAAMC,iBACN,EAAKhB,iBAAiBiB,UAAY,GAFoB,IC7B3BC,ED6B2B,GC7B3BA,EDgCsC,EAAKrB,WChCnCsB,MAClCC,KAAKF,EAAKG,UACVC,QAAO,SAACC,EAAD,OAAQC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,MAAZ,mBAAC,eAA2BD,EAAKC,GAAUF,KAAQ,KD8BnDG,EAH8C,EAG9CA,OAAQC,EAHsC,EAGtCA,SAAUC,EAH4B,EAG5BA,SAAUC,EAHkB,EAGlBA,IAAKC,EAHa,EAGbA,IACzC,EAAKC,eACL3B,MAAM,uIAAD,OAAwIsB,EAAxI,kBAAwJC,EAAxJ,qBAA6KC,EAA7K,uBAAoMC,EAApM,uBAAsNC,IACxNzB,MAAK,SAAA2B,GAAQ,OAAIA,EAASzB,UAC1BF,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QAEP,OADA,EAAK2B,cACE3B,EACJ4B,KAAI,SAAAC,GAAG,OEvCS,SAACA,EAAKC,GAAN,gFAEeD,EAAIE,MAFnB,kBAEkCD,GAFlC,OAE6CD,EAAIG,WAFjD,6DAGkBH,EAAIR,SAASY,aAH/B,+DAIoBJ,EAAIK,YAJxB,6DAKmBL,EAAIM,aALvB,8CFuCLC,CAAYP,EAAK,EAAK1B,mBACjCkC,KAAK,OAETtC,MAAK,SAAAuC,GAAI,OAAI,EAAK5C,iBAAiBiB,UAAY2B,KAC/CC,OAAM,kBAAM,EAAKZ,sBAvCxB,qCA4CIrC,KAAKK,eAAe6C,UAAUC,IAAI,aA5CtC,oCAgDInD,KAAKK,eAAe6C,UAAUE,OAAO,eAhDzC,KDAkB,CAAc,eAAgB,oBAAqB,oBACrExD,EAAUyD,iBACVzD,EAAU0D,wBAYKC,MARf,WACE,OACE,yBAAKC,UAAU,SIACC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7D,SAAS8D,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a92cbcdb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { JobSearch } from './JobSearch';\n\nconst jobSearch = new JobSearch('#search-form', '.result-container', '.loading-element');\njobSearch.setCountryCode();\njobSearch.configureFormListener();\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    </div>\n  );\n}\n\nexport default App;\n","import { jobTemplate } from './Templates.js';\nimport { extractFormData, getCurrencySymbol } from './Utils.js';\n\n\nexport class JobSearch {\n\n  constructor(searchFormSelector, resultsContainerSelector, loadingElementSelector) {\n    this.searchForm = document.querySelector(searchFormSelector);\n    this.resultsContainer = document.querySelector(resultsContainerSelector);\n    this.loadingElement = document.querySelector(loadingElementSelector);\n  }\n\n  setCountryCode() {\n    this.countryCode = 'gb';\n    this.setCurrencySymbol();\n\n    fetch('http://ip-api.com/json')\n      .then(results => results.json())\n      .then(results => {\n        this.countryCode = results.countryCode.toLowerCase();\n        this.setCurrencySymbol();\n      });\n  }\n\n  setCurrencySymbol() {\n    this.currencySymbol = getCurrencySymbol(this.countryCode);\n  }\n\n  configureFormListener() {\n    this.searchForm.addEventListener('submit', (event) => {\n    event.preventDefault();\n    this.resultsContainer.innerHTML = '';\n    const { search, location, distance, min, max } = extractFormData(this.searchForm);\n    this.startLoading();\n    fetch(`https://api.adzuna.com/v1/api/jobs/gb/search/2?app_id=fe8c748e&app_key=20c3e73a59479724e90591efe9cdfa7d&results_per_page=10000&what=${search}&where=${location}&distance=${distance}&salary_min=${min}&salary_max=${max}`)\n      .then(response => response.json())\n      .then(({ results }) => {\n        this.stopLoading();\n        return results\n          .map(job => jobTemplate(job, this.currencySymbol))\n          .join('');\n      })\n      .then(jobs => this.resultsContainer.innerHTML = jobs)\n      .catch(() => this.stopLoading());\n    });\n  }\n\n  startLoading() {\n    this.loadingElement.classList.add('loading');\n  }\n\n  stopLoading() {\n    this.loadingElement.classList.remove('loading');\n  }\n}\n","export const extractFormData = form => Array\n    .from(form.elements)\n    .reduce((acc, { id, value }) => ({ [id]: value, ...acc }), {});\n\nexport const getCurrencySymbol = country => {\n    const currencies = {\n        gb: 'Â£',\n        us: '$',\n        au: '$',\n        ca: '$',\n    };\n    return currencies[country];\n}\n","export const jobTemplate = (job, currency) => `\n  <div class=\"card\">\n  <h4 class=\"animated fadeIn job-title\">${job.title} up to ${currency}${job.salary_max}</h4>\n  <h5 class=\"animated fadeIn job-location\">${job.location.display_name}</h5>\n  <p class=\"animated fadeIn job-description\">${job.description}</p>\n  <a class=\"animated fadeIn view-job\" href=\"${job.redirect_url}\" target=\"_blank\">View Job</a>\n  </div>\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}